{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["AddQuantity","props","className","onClick","freezed","handleAddQuantity","name","SubtractQuantity","handleSubtractQuantity","DeleteItem","handleDeleteItem","ListItem","id","quantity","style","background","color","handleClick","ListDisplay","items","map","item","i","key","InputText","useState","value","setValue","onSubmit","e","preventDefault","handleSubmit","onChange","target","type","ClearAllItem","handleClearAllItem","App","setItems","idCount","length","slice","filter","itemExist","toLowerCase","itemObj","concat","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.58b1d892.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nconst AddQuantity = (props) => (\n  <button className=\"op-button\" onClick={()=> {if(!props.freezed) {props.handleAddQuantity(props);}}} name=\"add_quantity\">+</button>\n)\nconst SubtractQuantity = (props) => (\n  <button className=\"op-button\" onClick={()=> {if(!props.freezed) {props.handleSubtractQuantity(props);}}} name=\"subtract_quantity\">-</button>\n)\nconst DeleteItem = (props) => (\n  <button className=\"op-button\" onClick={()=> {if(!props.freezed) {props.handleDeleteItem(props);}}} name=\"delete_item\">X</button>\n)\n\nconst ListItem = (props) => (\n  <>\n  <div className=\"button-wrap\">\n    <DeleteItem \n      id = {props.id} \n      quantity = {props.quantity}\n      name = {props.name}\n      freezed = {props.freezed}\n      handleDeleteItem={props.handleDeleteItem} \n    />\n    <SubtractQuantity \n      id = {props.id} \n      quantity = {props.quantity}\n      name = {props.name}\n      freezed = {props.freezed}\n      handleSubtractQuantity={props.handleSubtractQuantity} \n    />\n    <AddQuantity \n      id = {props.id} \n      quantity = {props.quantity}\n      name = {props.name}\n      freezed = {props.freezed}\n      handleAddQuantity={props.handleAddQuantity} \n    />\n  </div>\n  <li style={{ background: props.color }} onClick={()=> {props.handleClick(props);} }>\n    {props.name} X {props.quantity}\n  </li>\n</>\n)\nconst ListDisplay = (props) => {\n  const items = props.items.map((item, i) => (\n    <ListItem\n      key={i}\n      id={item.id}\n      name={item.name}\n      quantity={item.quantity}\n      freezed={item.freezed}\n      color={item.color}\n      handleClick={props.handleClick}\n      handleAddQuantity={props.handleAddQuantity}\n      handleSubtractQuantity={props.handleSubtractQuantity} \n      handleDeleteItem={props.handleDeleteItem} \n    />\n  ))\n  \n  return (\n    <ul>\n      {items}\n    </ul>\n  )\n}\n\nconst InputText = (props) => {\n  const [value, setValue] = useState('');\n  return (\n    <form onSubmit={(e) => {\n      e.preventDefault();\n      props.handleSubmit(value);\n      setValue('');\n    }}>\n      <input onChange={e => setValue(e.target.value)}  />\n      <button className=\"add_button\" type=\"submit\" >Add Item</button>\n    </form>\n  )\n}\nconst ClearAllItem = (props) => (\n  <button className=\"add_button\" onClick={()=> props.handleClearAllItem()} name=\"clear_all_item\">Clear All Items</button>\n)\n\nfunction App() {\n  const [items, setItems] = useState([\n    {id:1, name:\"oranges\", quantity:2, freezed:false, color: '#61dafb'},\n    {id:2, name:\"apple\", quantity:2, freezed:false, color: '#61dafb'},\n    {id:3, name:\"candy\", quantity:2, freezed:false, color: '#61dafb'}\n  ]);\n  let idCount  = items.length;\n \n  return (\n    <div id=\"list-container\">\n      <ListDisplay items={items} \n        handleClick={(item) => { setItems(items.map((i) => {if(i.id === item.id) { \n                                                              if (item.freezed === true){\n                                                                i.freezed = false;\n                                                                i.color = '#61dafb';\n                                                              } else {\n                                                                i.freezed = true;\n                                                                i.color = 'red';\n                                                              }\n                                                            }return i;}));}}\n        handleDeleteItem={(item) => { setItems(items.slice().filter((i) =>  i.id !== item.id)); }}\n        handleAddQuantity={(item) => { setItems(items.map((i) => {if(i.id === item.id) { i.quantity = item.quantity+1; }return i;}));}}\n        handleSubtractQuantity={(item) => { setItems(items.map((i) => {if(i.id === item.id) {i.quantity = item.quantity-1<0 ? 0 : item.quantity-1; }return i;}));}}\n        />\n      <InputText handleSubmit={(item) => {\n          let itemExist = false;\n          for (let key in items) {\n            if(items[key].name === item.toLowerCase()) {\n              itemExist = true;\n              setItems(items.map((i) => {if(i.name === item.toLowerCase()) {i.quantity += 1; } return i; }));\n            }\n          }\n          if (!itemExist) {\n            let itemObj = {};\n            idCount += 1\n            itemObj.id = idCount;\n            itemObj.name = item.toLowerCase();\n            itemObj.quantity = 0;\n            itemObj.freezed = false;\n            itemObj.color = '#61dafb';\n            setItems(items.concat(itemObj));\n          }\n        }}\n      />\n      <ClearAllItem handleClearAllItem={() => {setItems([])}}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}